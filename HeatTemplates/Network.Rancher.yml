heat_template_version: 2013-05-23
# Author: Miguel Angel Diego Alfageme
# Date: 05/09/2017
# Purpose: Deploy Infraestructure needed to make a Docker network 
# on Fujitsu's Cloud Service K5 IaaS Platform
#
#
description: Deploy Network & Ubuntu Image with Docker & Rancher Server

# Input parameters
parameters:
  name_preffix:
    type: string
    label: Name preffix
    description: Name preffix used to concat to all the resources (unique for K5 project)
    default: "cnets-rancher"
  routerid:
    type: string
    label: Router ID
    description: Router ID
    default: "8467cb7c-94af-4094-9d2b-18f011d97d36"
  k5_ubuntu_image:
    type: string
    label: Image name or ID
    description: Image to be used for compute instance
    default: "Ubuntu Server 16.04 LTS (English) 01"
  flavor:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used
    default: "C-1"
  key_pair:
    type: string
    label: Key name
    description: Name of key-pair to be used for compute instance
    default: "cnets-mdiego"
  public_net:
    type: string
    label: public network id
    description: id of public network to supply floating ips
    default: "df8d3f21-75f2-412a-8fd9-29de9b4a4fa8"
  privatecidr:
    type: string
    label: CIDR
    description: Private CIDR
    default: "10.0.10.0/24"
  az:
    type: string
    label: Availability Zone
    description: Region AZ to use
    default: "uk-1a"
  my_ip:
    type: string
    label: External management IP
    description: IP address allowed for access to our infra
    default: "0.0.0.0/0" 

# K5 Infrastructure resources to be built
resources:   
# ===========================================================================    
# Create network AZ1
  private_network:
    type: OS::Neutron::Net
    properties:
      availability_zone: { get_param: az }
      name:
        str_replace:
          template: "$name_preffix-net"
          params:
            "$name_preffix": { get_param: name_preffix } 

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      availability_zone: { get_param: az }
      network_id: { get_resource: private_network }
      cidr: {get_param: privatecidr}
      name:
        str_replace:
          template: "$name_preffix-subnet"
          params:
            "$name_preffix": { get_param: name_preffix } 
      dns_nameservers:
        - 62.60.39.9
        - 62.60.39.10
        - 8.8.8.8
  server_port:
    type: OS::Neutron::Port
    depends_on: [private_network, security_group]
    properties:
      availability_zone: { get_param: az }
      network: { get_resource: private_network }
      security_groups:
        - { get_resource: security_group }
   
  # Connect an interface on the network's subnet to the router
  router_interface:
    type: OS::Neutron::RouterInterface
    depends_on: [private_subnet]
    properties:
      router_id: { get_param: routerid }
      subnet_id: { get_resource: private_subnet }
  
  # Create docker & http access Security Group
  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: docker infra security group
      name:
        str_replace:
          template: "$name_preffix-access"
          params:
            "$name_preffix": { get_param: name_preffix } 
      rules:
        # allow inbound ssh and ping from my ip
        - remote_ip_prefix: { get_param: my_ip }
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: { get_param: my_ip }
          protocol: icmp
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 8080
          port_range_max: 8080
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 443
          port_range_max: 443
        - remote_ip_prefix: { get_param: privatecidr }
          protocol: tcp
          port_range_min: 1
          port_range_max: 65535
        - remote_ip_prefix: { get_param: privatecidr }
          protocol: udp
          port_range_min: 1
          port_range_max: 65535
        - remote_ip_prefix: { get_param: privatecidr }
          protocol: icmp
# ===========================================================================

  # -------------------------------------------------------------------------
  # Create a system volume for use with the server
  rancherserver_sys_vol:
    type: OS::Cinder::Volume
    properties:
      availability_zone: { get_param: az }
      name:
        str_replace:
          template: "$name_preffix-box"
          params:
            "$name_preffix": { get_param: name_preffix } 
      size: 80
      volume_type: "M1"
      image : { get_param: k5_ubuntu_image }

# Build a docker server using the system volume defined above
  rancherserver_server:
    type: OS::Nova::Server
    depends_on: [ server_port, rancherserver_sys_vol ]
    properties:
      availability_zone: { get_param: az }
      name:
        str_replace:
          template: "$name_preffix-server"
          params:
            "$name_preffix": { get_param: name_preffix } 
      key_name: { get_param: key_pair }
      flavor: { get_param: flavor }
      admin_user: ubuntu
      image : { get_param: k5_ubuntu_image }
      metadata: { "fcx.autofailover": True }
      block_device_mapping: [{"volume_size": "80", "volume_id": { get_resource: rancherserver_sys_vol }, "delete_on_termination": True, "device_name": "/dev/vda"}]
      networks:
        - port: { get_resource: server_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #cloud-config
            write_files:
            apt_update: true
            runcmd:
              # Config hostname resolution
              - echo $app_ip `hostname` >> /etc/hosts
              # Install Docker
              - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
              - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
              - sudo apt-get update
              - apt-cache policy docker-ce
              - sudo apt-get install -y docker-ce nfs-kernel-server
              - sleep 90
              - sudo usermod -aG docker ubuntu
              - sudo docker pull rancher/server:stable
              - sudo mkdir -p /var/nfs
              - sudo chmod 777 /var/nfs
              - sudo chown nobody:nogroup /var/nfs/
              - echo '/var/nfs 10.0.10.0/24(rw,sync,no_subtree_check,no_root_squash)' >> /etc/exports
              - sudo service nfs-kernel-server restart
          params:
            $app_ip: { get_attr: [server_port, fixed_ips, 0, ip_address]}
            message: "Installation of Docker Service Complete"
# Allocate a floating/global ip address
  rancherserver_server_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      availability_zone: { get_param: az }
      floating_network_id: { get_param: public_net }

# Assign a floating/global ip address to the fixed server ip address
  rancherserver_server_floating_ip_association:
    type: OS::Neutron::FloatingIPAssociation
    depends_on: [rancherserver_server_floating_ip, server_port]
    properties:
      floatingip_id: { get_resource: rancherserver_server_floating_ip }
      port_id: { get_resource: server_port }
# ----------------------------------------------------------------------------------